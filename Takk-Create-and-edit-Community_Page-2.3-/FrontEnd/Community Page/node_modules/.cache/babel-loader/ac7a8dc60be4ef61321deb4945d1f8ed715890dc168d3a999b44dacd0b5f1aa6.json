{"ast":null,"code":"import { API_BASE_URL, ACCESS_TOKEN, USER_Name } from '../constants';\nconst request = options => {\n  const headers = new Headers({\n    'Content-Type': 'application/json'\n  });\n  if (localStorage.getItem(ACCESS_TOKEN)) {\n    headers.append('Authorization', 'Bearer ' + localStorage.getItem(ACCESS_TOKEN));\n  }\n  const defaults = {\n    headers: headers\n  };\n  options = Object.assign({}, defaults, options);\n  return fetch(options.url, options).then(response => response.json().then(json => {\n    if (!response.ok) {\n      return Promise.reject(json);\n    }\n    console.log(json);\n    return json;\n  }));\n};\nexport function getCurrentUser(email) {\n  if (!localStorage.getItem(ACCESS_TOKEN)) {\n    return Promise.reject(\"No access token set.\");\n  }\n  return request({\n    url: API_BASE_URL + \"/user/me\",\n    method: 'GET'\n  });\n  {/*\n      const headers = new Headers({\n          'Content-Type': 'application/json',\n      })    \n      if(localStorage.getItem(ACCESS_TOKEN)) {\n          headers.append('Authorization', 'Bearer ' + localStorage.getItem(ACCESS_TOKEN))\n      }\n      fetch('http://localhost:8080/user/me', {\n          method: 'GET',\n          headers:headers\n      }       \n      .then((res) => {\n            if (res.ok) {\n              return res.json();\n            } else {\n              window.alert(\"Could not get communities\");\n              console.log(\"Error\");\n            }\n      })\n      .then((data) => {\n            console.log(data);\n            localStorage.setItem(USER_Name, data.name)\n      })\n      .catch((error) => console.error(\"Error:\", error))\n      )\n   */}\n}\nexport function login(loginRequest) {\n  return request({\n    url: API_BASE_URL + \"/auth/login\",\n    method: 'POST',\n    body: JSON.stringify(loginRequest)\n  });\n}\nexport function signup(signupRequest) {\n  return request({\n    url: API_BASE_URL + \"/auth/signup\",\n    method: 'POST',\n    body: JSON.stringify(signupRequest)\n  });\n}","map":{"version":3,"names":["API_BASE_URL","ACCESS_TOKEN","USER_Name","request","options","headers","Headers","localStorage","getItem","append","defaults","Object","assign","fetch","url","then","response","json","ok","Promise","reject","console","log","getCurrentUser","email","method","login","loginRequest","body","JSON","stringify","signup","signupRequest"],"sources":["C:/Users/goodall/Desktop/Github/Takk/Takk-Create-and-edit-Community_Page-2.3-/FrontEnd/Community Page/src/util/APIUtils.js"],"sourcesContent":["import { API_BASE_URL, ACCESS_TOKEN, USER_Name } from '../constants';\n\nconst request = (options) => {\n\n    const headers = new Headers({\n        'Content-Type': 'application/json',\n    })\n    \n    if(localStorage.getItem(ACCESS_TOKEN)) {\n        headers.append('Authorization', 'Bearer ' + localStorage.getItem(ACCESS_TOKEN))\n    }\n\n    const defaults = {headers: headers};\n    options = Object.assign({}, defaults, options);\n\n    return fetch(options.url, options)\n    .then(response => \n        response.json().then(json => {\n            if(!response.ok) {\n                return Promise.reject(json);\n            }\n            console.log(json)\n            return json;\n        })\n    )\n};\n\nexport function getCurrentUser(email) {\n    if(!localStorage.getItem(ACCESS_TOKEN)) {\n        return Promise.reject(\"No access token set.\");\n    }\n    return request({\n        url: API_BASE_URL + \"/user/me\",\n        method: 'GET'\n    });\n{/*\n    const headers = new Headers({\n        'Content-Type': 'application/json',\n    })    \n    if(localStorage.getItem(ACCESS_TOKEN)) {\n        headers.append('Authorization', 'Bearer ' + localStorage.getItem(ACCESS_TOKEN))\n    }\n    fetch('http://localhost:8080/user/me', {\n        method: 'GET',\n        headers:headers\n    }       \n    .then((res) => {\n          if (res.ok) {\n            return res.json();\n          } else {\n            window.alert(\"Could not get communities\");\n            console.log(\"Error\");\n          }\n    })\n    .then((data) => {\n          console.log(data);\n          localStorage.setItem(USER_Name, data.name)\n    })\n    .catch((error) => console.error(\"Error:\", error))\n    )\n*/}\n}\n\nexport function login(loginRequest) {\n    return request({\n        url: API_BASE_URL + \"/auth/login\",\n        method: 'POST',\n        body: JSON.stringify(loginRequest)\n    });\n}\n\nexport function signup(signupRequest) {\n    return request({\n        url: API_BASE_URL + \"/auth/signup\",\n        method: 'POST',\n        body: JSON.stringify(signupRequest)\n    });\n}"],"mappings":"AAAA,SAASA,YAAY,EAAEC,YAAY,EAAEC,SAAS,QAAQ,cAAc;AAEpE,MAAMC,OAAO,GAAIC,OAAO,IAAK;EAEzB,MAAMC,OAAO,GAAG,IAAIC,OAAO,CAAC;IACxB,cAAc,EAAE;EACpB,CAAC,CAAC;EAEF,IAAGC,YAAY,CAACC,OAAO,CAACP,YAAY,CAAC,EAAE;IACnCI,OAAO,CAACI,MAAM,CAAC,eAAe,EAAE,SAAS,GAAGF,YAAY,CAACC,OAAO,CAACP,YAAY,CAAC,CAAC;EACnF;EAEA,MAAMS,QAAQ,GAAG;IAACL,OAAO,EAAEA;EAAO,CAAC;EACnCD,OAAO,GAAGO,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEF,QAAQ,EAAEN,OAAO,CAAC;EAE9C,OAAOS,KAAK,CAACT,OAAO,CAACU,GAAG,EAAEV,OAAO,CAAC,CACjCW,IAAI,CAACC,QAAQ,IACVA,QAAQ,CAACC,IAAI,EAAE,CAACF,IAAI,CAACE,IAAI,IAAI;IACzB,IAAG,CAACD,QAAQ,CAACE,EAAE,EAAE;MACb,OAAOC,OAAO,CAACC,MAAM,CAACH,IAAI,CAAC;IAC/B;IACAI,OAAO,CAACC,GAAG,CAACL,IAAI,CAAC;IACjB,OAAOA,IAAI;EACf,CAAC,CAAC,CACL;AACL,CAAC;AAED,OAAO,SAASM,cAAc,CAACC,KAAK,EAAE;EAClC,IAAG,CAACjB,YAAY,CAACC,OAAO,CAACP,YAAY,CAAC,EAAE;IACpC,OAAOkB,OAAO,CAACC,MAAM,CAAC,sBAAsB,CAAC;EACjD;EACA,OAAOjB,OAAO,CAAC;IACXW,GAAG,EAAEd,YAAY,GAAG,UAAU;IAC9ByB,MAAM,EAAE;EACZ,CAAC,CAAC;EACN,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAzBC;AA0BD;AAEA,OAAO,SAASC,KAAK,CAACC,YAAY,EAAE;EAChC,OAAOxB,OAAO,CAAC;IACXW,GAAG,EAAEd,YAAY,GAAG,aAAa;IACjCyB,MAAM,EAAE,MAAM;IACdG,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACH,YAAY;EACrC,CAAC,CAAC;AACN;AAEA,OAAO,SAASI,MAAM,CAACC,aAAa,EAAE;EAClC,OAAO7B,OAAO,CAAC;IACXW,GAAG,EAAEd,YAAY,GAAG,cAAc;IAClCyB,MAAM,EAAE,MAAM;IACdG,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACE,aAAa;EACtC,CAAC,CAAC;AACN"},"metadata":{},"sourceType":"module","externalDependencies":[]}